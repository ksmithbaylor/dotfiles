#!/usr/bin/env ruby

require 'httparty'
require 'awesome_print'
require 'pmap'

dsas = [
  # ['0x74B19c1EbDdb47404Cfa38e3C7fC4A8C9d98AfAC', 'polygon'],
  # ['0x3C2B6Cd800c135B1868581606fE25567869C4c79', 'polygon'],
  ['0x7d92E9879d8C7735b4D1470855fD0891793D604a', 'avalanche'],
  # ['0x57f35fce49e48294D2f353BEd09C166E5feCDfCe', 'avalanche'],
  # '0xCd0fBbA9927F6004Dbf7cDBFA73fd26A661bC694'
  # '0xA5f9Fd999Ee1dE4A0CE65DD257144a610E60037D'
]

DECIMALS = {
  'DAI' => 2,
  'USD' => 2,
  'USDC' => 2,
  'MATIC' => 8,
  'AVAX' => 8,
  'WBTC' => 8,
  'ETH' => 8,
  'percent' => 3
}

def position_for(address, network)
  HTTParty.get "https://api.instadapp.io/defi/#{network}/aave/v2/position?user=#{address}"
end

def price_in_usd(address, network)
  $prices ||= {}
  $prices[network] ||= HTTParty.get "https://api.instadapp.io/defi/#{network}/prices"
  $prices[network][address].to_f
end

MATIC_RATES = {
  'DAI' => price_in_usd('0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063', 'polygon'),
  'USDC' => 1.0,
  'WBTC' => price_in_usd('0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6', 'polygon'),
  'ETH' => price_in_usd('0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619', 'polygon'),
  'MATIC' => price_in_usd('0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE', 'polygon')
}

AVAX_RATES = {
  'DAI' => price_in_usd('0xd586E7F844cEa2F87f50152665BCbc2C279D8d70', 'avalanche'),
  'USDC' => 1.0,
  'USDT' => price_in_usd('0xc7198437980c041c805A1EDcbA50c1Ce5db95118', 'avalanche'),
  'WBTC' => price_in_usd('0x50b7545627a5162F82A992c33b87aDc75187B218', 'avalanche'),
  'ETH' => price_in_usd('0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB', 'avalanche'),
  'AVAX' => price_in_usd('0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE', 'avalanche')
}

RATES = {
  'polygon' => MATIC_RATES,
  'avalanche' => AVAX_RATES
}

REWARD_TOKEN = {
  'polygon' => 'MATIC',
  'avalanche' => 'AVAX'
}

class Float
  def display(kind)
    number = "%.#{DECIMALS[kind]}f" % self
    case kind
    when 'percent'
      number + '%'
    else
      number + " #{kind}"
    end
  end
end

puts "Polygon Rates:"
MATIC_RATES.each do |k, v|
  puts "  #{k} / USD: ".rjust(13) + v.display('USD').rjust(8)
end
puts
puts "Avalanche Rates:"
AVAX_RATES.each do |k, v|
  puts "  #{k} / USD: ".rjust(13) + v.display('USD').rjust(8)
end
puts

total_assets = 0;
total_rewards = REWARD_TOKEN.keys.map { |network| [network, 0] }.to_h

outputs = dsas.map do |dsa|
  address, network = dsa
  position = position_for(address, network)

  return if position['data'].nil?
  
  used_assets = position["data"].reject do |asset|
    asset["supply"].to_f < 0.00000000001 &&
    asset["borrow"].to_f < 0.00000000001
  end

  return if used_assets.empty?

  output = []
  output << address

  max_asset = used_assets.map{|a|a['key']}.max_by(&:length).length
  pending_rewards = position["pendingRewards"].to_f
  total_rewards[network] += pending_rewards

  used_assets.each do |asset|
    title = asset["key"].upcase
    borrowed = asset["borrow"].to_f
    supplied = asset["supply"].to_f
    net = supplied - borrowed
    net_usd = net * RATES[network][title]
    total_assets += net_usd
    ratio = 100 * borrowed / supplied
    liquidation = 100 * asset["liquidation"].to_f
    pending_in_native = pending_rewards * RATES[network][REWARD_TOKEN[network]] / RATES[network][title]
    rate = 100 * (
      supplied * asset["supplyRate"].to_f +
      supplied * asset["supplyRewardRate"].to_f * RATES[network][REWARD_TOKEN[network]] -
      borrowed * asset["borrowRate"].to_f +
      borrowed * asset["borrowRewardRate"].to_f * RATES[network][REWARD_TOKEN[network]]
    ) / net
    output << "  #{title}"
    output << "    Net:     #{net.display title}"
    output << "    Pending: #{pending_in_native.display(title).rjust([DECIMALS[title] + 2, 8].max + title.length + 1)} (#{pending_rewards.display REWARD_TOKEN[network]})"
    output << "    Total:   #{(net + pending_in_native).display title}"
    output << "    Worth:   #{net_usd.display 'USD'}"
    output << "    Rate:    #{rate.display 'percent'}"
    output << "    Ratio:   #{ratio.display 'percent'} / #{liquidation.display 'percent'} (#{(liquidation - ratio).display 'percent'} away)"
    output << ''
  end

  output
end

outputs.each do |output|
  puts output
end

total_rewards_usd = total_rewards.map do |network, amount|
  [network, amount * RATES[network][REWARD_TOKEN[network]]]
end.to_h

puts "Total assets:    #{total_assets.display 'USD'}"
puts "Total rewards:   #{total_rewards_usd.values.inject(&:+).display 'USD'}"
total_rewards.each do |network, amount|
  puts "  #{amount.display REWARD_TOKEN[network]}"
end

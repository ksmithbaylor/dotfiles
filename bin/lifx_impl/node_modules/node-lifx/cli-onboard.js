'use strict';

var wifiScanner = require('node-wifi-scanner');
var _ = require('lodash');
var LifxOnboarder = require('./lib/lifx').Onboarder;
var onboarder = new LifxOnboarder();

/**
 * Inline polyfills wohoo
 */
if (!String.prototype.endsWith) {
  String.prototype.endsWith = function(searchString, position) {
    var subjectString = this.toString();
    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
      position = subjectString.length;
    }
    position -= searchString.length;
    var lastIndex = subjectString.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
}

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function(searchString, position) {
    position = position || 0;
    return this.substr(position, searchString.length) === searchString;
  };
}

/**
 * Events for onboarder
 */
onboarder.on('error', function(err) {
  console.log('LIFX error:\n' + err.stack);
  onboarder.destroy();
});

onboarder.on('message', function(msg) {
  console.log(msg);
});

onboarder.on('connected', function() {
  console.log('Connected to LIFX light');
});

/*
wifiScanner.scan(function(err, networks) {
  if (err) {
    console.error(err);
    return;
  }

  var lifxNetworks = _.filter(networks, function(network) {
    if (network.mac.startsWith('d0:73:d5') ||
        network.ssid.startsWith('AJ_') ||
        network.ssid.endsWith('_AJ')) {
      return true;
    }
    return false;
  });

  console.log(lifxNetworks);
});
*/


onboarder.init();

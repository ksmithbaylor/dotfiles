#!/usr/bin/env ruby

class Projects
  def initialize
    @skip_directories = `[ -f .skip ] && cat .skip`.split
    @directories = `ls -p | grep '/'`.split.map { |d| d.gsub '/', '' } - @skip_directories
    @cols = `tput cols`.to_i
  end

  def run(command)
    case command
    when 'clone'
      clone
    when 'status', 'st'
      status
    when 'update', 'up'
      update
    when 'master'
      master
    when 'refresh'
      refresh
    when nil, 'help', '--help'
      puts <<~HELP
        Usage: `projects <command>`

          Command      Shortened      Description

          clone                       Clones multiple repos (<base> [repo_names])
          status       st             Show the status of all projects
          update       up             Update all branches of all projects
          master                      Switch back to master on all projects
          refresh                     Combines `master` and `update`
      HELP
    else
      puts 'No such command.'
    end
  end

  def clone
    base = ARGV[1]
    repos = ARGV[2..-1]

    base = "git@github.com:#{base}" unless base.start_with?('git@') or base.start_with?('http')

    repos.each do |repo|
      `git clone #{base}/#{repo}`
    end
  end

  def status
    each_directory do |dir|
      if is_clean dir
        branch = in_directory dir, 'git branch --show-current'
        puts "Clean, on branch #{branch}"
      else
        puts git_status dir
      end
    end
  end

  def update
    each_directory do |dir|
      update_all_branches dir
    end
  end

  def master
    each_directory do |dir|
      checkout_master dir
    end
  end

  def refresh
    each_directory do |dir|
      checkout_master dir
      update_all_branches dir
    end
  end

  private

  def git_status(dir)
    puts(in_directory dir, "git -c color.status=always status")
  end

  def update_all_branches(dir)
    puts(in_directory dir, "git -c color.status=always up")
  end

  def checkout_master(dir)
    in_directory dir, "git checkout master"
  end

  def each_directory
    puts 'No directories found!' if @directories.empty?
    @directories.each do |dir|
      print_header dir
      if is_clean dir
        yield dir
      else
        git_status dir
        puts "Not clean, skipping"
      end
    end
  end

  def print_header(dir)
    puts "===== #{(dir + ' ').ljust @cols - 7, '='}"
  end

  def in_directory(dir, cmd)
    Dir.chdir(dir) { `#{cmd}` }
  end

  def is_clean(dir)
    (in_directory dir, "git -c color.status=always status -s").size == 0
  end
end

Projects.new.run(ARGV[0])
